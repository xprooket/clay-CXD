[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cxd-classifier"
version = "2.0.0"
description = "Advanced hybrid lexical-semantic classifier for cognitive executive dynamics"
authors = [{name = "CXD Team", email = "team@cxd.dev"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["nlp", "classification", "cognitive", "ai", "machine-learning"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    "numpy>=1.20.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "pyyaml>=6.0",
    "typer[all]>=0.9.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
faiss = ["faiss-cpu>=1.7.4"]
faiss-gpu = ["faiss-gpu>=1.7.4"]
transformers = ["sentence-transformers>=2.2.0", "torch>=1.10.0"]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]
all = ["cxd-classifier[faiss,transformers]"]
full = ["cxd-classifier[faiss-gpu,transformers,dev]"]

[project.urls]
Homepage = "https://github.com/cxd-team/cxd-classifier"
Documentation = "https://cxd-classifier.readthedocs.io"
Repository = "https://github.com/cxd-team/cxd-classifier.git"
"Bug Tracker" = "https://github.com/cxd-team/cxd-classifier/issues"

[project.scripts]
cxd = "cxd_classifier.cli:app"

[tool.setuptools.packages.find]
where = ["src"]
include = ["cxd_classifier*"]

[tool.setuptools.package-data]
cxd_classifier = [
    "py.typed",
    "config/*.yaml",
    "config/*.json",
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["cxd_classifier"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "sentence_transformers.*",
    "sklearn.*",
    "torch.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "performance: marks tests as performance benchmarks",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/cxd_classifier"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
